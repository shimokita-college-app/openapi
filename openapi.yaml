openapi: 3.1.0
x-stoplight:
  id: nndim032h4cdu
info:
  title: SC App API
  version: '1.1'
servers:
  - url: 'http://localhost:3000'
paths:
  /login:
    post:
      summary: Login
      operationId: login
      responses:
        '200':
          $ref: '#/components/responses/LoginResponse'
        '400':
          description: |-
            Bad Request

            無効なfirebaseIdToken
        '401':
          description: |-
            Unauthorized

            運営がデータを登録してないアカウント
        '403':
          description: |-
            Forbidden

            disabledアカウント
      description: ''
      parameters: []
      requestBody:
        $ref: '#/components/requestBodies/LoginRequest'
      tags:
        - auth
  /me:
    put:
      summary: Update Me
      operationId: update-me
      responses:
        '200':
          $ref: '#/components/responses/User'
        '400':
          description: Bad Request
      security:
        - accessToken: []
      tags:
        - user
      requestBody:
        $ref: '#/components/requestBodies/UpdateUserRequest'
    parameters: []
    get:
      summary: Get Me
      operationId: get-me
      responses:
        '200':
          $ref: '#/components/responses/User'
      description: '`user.answeredAt`が無い場合、初期登録フォームへ'
      tags:
        - user
      security:
        - accessToken: []
  '/users/{userId}':
    parameters:
      - $ref: '#/components/parameters/UserId'
    get:
      summary: Get User
      operationId: get-user
      responses:
        '200':
          $ref: '#/components/responses/User'
        '404':
          description: Not Found
      security:
        - accessToken: []
      tags:
        - user
  /users:
    get:
      summary: Get Users
      tags:
        - user
      responses:
        '200':
          $ref: '#/components/responses/Users'
      operationId: get-users
      security:
        - accessToken: []
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
      description: ''
  /users/search:
    get:
      summary: Search Users
      tags:
        - user
      responses:
        '200':
          $ref: '#/components/responses/Users'
      operationId: search-users
      parameters:
        - $ref: '#/components/parameters/Query'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
      security:
        - accessToken: []
  /programs:
    get:
      summary: Get Programs
      tags:
        - generation
      responses:
        '200':
          $ref: '#/components/responses/Generations'
      operationId: get-programs
      security:
        - accessToken: []
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
    parameters: []
  /houses:
    get:
      summary: Get Houses
      tags:
        - generation
      responses:
        '200':
          $ref: '#/components/responses/Generations'
      operationId: get-houses
      security:
        - accessToken: []
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
    parameters: []
  '/generations/{generationId}':
    parameters:
      - $ref: '#/components/parameters/GenerationId'
    get:
      summary: Get Generation
      tags:
        - generation
      responses:
        '200':
          $ref: '#/components/responses/Generation'
        '404':
          description: Not Found
      operationId: get-generation
      security:
        - accessToken: []
  /committees:
    get:
      summary: Get Committees
      tags:
        - group
      responses:
        '200':
          $ref: '#/components/responses/Groups'
      operationId: get-committees
      security:
        - accessToken: []
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
    parameters: []
  /clubs:
    get:
      summary: Get Clubs
      tags:
        - group
      responses:
        '200':
          $ref: '#/components/responses/Groups'
      operationId: get-clubs
      security:
        - accessToken: []
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
    parameters: []
  '/groups/{groupId}':
    parameters:
      - $ref: '#/components/parameters/GroupId'
    get:
      summary: Get Group
      tags:
        - group
      responses:
        '200':
          $ref: '#/components/responses/Group'
        '404':
          description: Not Found
      operationId: get-group
      security:
        - accessToken: []
components:
  schemas:
    User:
      allOf:
        - $ref: '#/components/schemas/ObjectId'
        - $ref: '#/components/schemas/FullName'
        - type: object
          properties:
            email:
              type: string
              format: email
              readOnly: true
            role:
              $ref: '#/components/schemas/Role'
            disabled:
              type: boolean
              readOnly: true
            answeredAt:
              type:
                - string
                - 'null'
              format: date-time
              readOnly: true
            imageUrl:
              type: string
              format: uri
            phoneticFirstName:
              type: string
            phoneticLastName:
              type: string
            i18n:
              type: object
              properties:
                en_US:
                  $ref: '#/components/schemas/FullName'
            nicknames:
              type: array
              uniqueItems: true
              items:
                type: string
            dateOfBirth:
              type: string
              format: date
            hideAge:
              type: boolean
            socialProfiles:
              type: object
              properties:
                twitter:
                  type: string
                  description: exclude "@"
                instagram:
                  type: string
                  description: exclude "@"
                paypay:
                  type: string
                  description: PayPay ID
            roomNumber:
              type: integer
              minimum: 100
              maximum: 599
            postNumber:
              type: integer
              minimum: 100
              maximum: 599
            generations:
              type: array
              uniqueItems: true
              items:
                $ref: '#/components/schemas/Generation'
            groups:
              type: array
              uniqueItems: true
              items:
                allOf:
                  - $ref: '#/components/schemas/Group'
                  - $ref: '#/components/schemas/Duration'
          required:
            - email
            - role
    Role:
      title: ''
      x-stoplight:
        id: eo0oadicbwru6
      type: string
      enum:
        - resident
        - alumni
        - staff
    Generation:
      allOf:
        - $ref: '#/components/schemas/ObjectId'
        - type: object
          properties:
            type:
              $ref: '#/components/schemas/GenerationType'
            name:
              type: string
            fullname:
              type: string
          required:
            - type
            - name
        - $ref: '#/components/schemas/Duration'
    GenerationType:
      title: ''
      x-stoplight:
        id: c6qkhitibtef4
      type: string
      enum:
        - program
        - house
    Group:
      allOf:
        - $ref: '#/components/schemas/ObjectId'
        - type: object
          properties:
            type:
              $ref: '#/components/schemas/GroupType'
            name:
              type: string
            emoji:
              type: string
            slackChannel:
              type: string
            createdAt:
              type: string
              format: date-time
            archivedAt:
              type: string
              format: date-time
          required:
            - type
            - name
    GroupType:
      title: ''
      x-stoplight:
        id: k26nompwlfp22
      type: string
      enum:
        - committee
        - club
    FullName:
      title: ''
      x-stoplight:
        id: 262b0c0213fe2
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
    Duration:
      title: ''
      x-stoplight:
        id: iygfgy4hr8zm8
      type: object
      properties:
        from:
          type: string
          format: date
        to:
          type: string
          format: date
    ObjectId:
      title: ''
      x-stoplight:
        id: zxngpftedwer2
      type: object
      properties:
        id:
          type: string
          readOnly: true
      required:
        - id
      readOnly: true
  securitySchemes:
    accessToken:
      type: http
      scheme: bearer
  parameters:
    Limit:
      name: limit
      in: query
      schema:
        type: string
    Offset:
      name: offset
      in: query
      required: false
      schema:
        type: string
    UserId:
      name: userId
      in: path
      required: true
      schema:
        type: string
      description: Id of an existing user.
    Query:
      name: q
      in: query
      required: true
      schema:
        type: string
    GenerationId:
      name: generationId
      in: path
      required: true
      schema:
        type: string
      description: Id of an existing generation.
    GroupId:
      name: groupId
      in: path
      required: true
      schema:
        type: string
      description: Id of an existing group.
  requestBodies:
    LoginRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              firebaseIdToken:
                type: string
            required:
              - firebaseIdToken
    UpdateUserRequest:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/FullName'
              - type: object
                properties:
                  imageUrl:
                    type: string
                    format: uri
                  phoneticFirstName:
                    type: string
                  phoneticLastName:
                    type: string
                  i18n:
                    type: object
                    properties:
                      en_US:
                        $ref: '#/components/schemas/FullName'
                  nicknames:
                    type: array
                    uniqueItems: true
                    items:
                      type: string
                  dateOfBirth:
                    type: string
                    format: date
                  hideAge:
                    type: boolean
                  socialProfiles:
                    type: object
                    properties:
                      twitter:
                        type: string
                        description: exclude "@"
                      instagram:
                        type: string
                        description: exclude "@"
                      paypay:
                        type: string
                        description: PayPay ID
                  roomNumber:
                    type: integer
                    minimum: 100
                    maximum: 599
                  postNumber:
                    type: integer
                    minimum: 100
                    maximum: 599
                  generations:
                    type: array
                    items:
                      $ref: '#/components/schemas/ObjectId'
                  groups:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/ObjectId'
                        - $ref: '#/components/schemas/Duration'
      description: ''
  responses:
    LoginResponse:
      description: ''
      content:
        application/json:
          schema:
            type: object
            properties:
              accessToken:
                type: string
            required:
              - accessToken
      headers: {}
    User:
      description: Example response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    Users:
      description: Example response
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
    Generation:
      description: Example response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Generation'
    Generations:
      description: Example response
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Generation'
    Group:
      description: Example response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Group'
    Groups:
      description: Example response
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Group'
tags:
  - name: auth
  - name: generation
  - name: group
  - name: user
